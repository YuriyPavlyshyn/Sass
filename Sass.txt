Sass -> це препроцессор для CSS, який розширює можливості стандартних таблиць стилів.

Налаштування середовища для препроцессора Sass:
(для чистого редактора)
- З самого початку в проекті створюємо папку "scss", потім у ній створюємо файл "style.scss".
- Нажимаючи в VS Code знизу кнопочку "watch sass" -> плагін плагін починає автоматично слідкувати за 
нашими "scss" файлами.
- Після цього автоматично в папці "scss" скомпілюються два файли (створюються):
  1. style.css; 2. style.css.map;
- Видаляємо файл "style.css" із папки css та файли "style.css", "style.css.map" з папки "scss".
- "Ctrl+Shift+P" (в редакторі відкривається поукове вікно)
- Обираємо: Open User Settings (JSON)
- Відкривається файл: "settings.json"
- Дописуємо в файлі наступний код:

"liveSassCompile.settings.generateMap": false,
    "liveSassCompile.settings.formats": [
        {
            "format": "expanded",
            "autoprefix": "last 5 versions",
            "extensionName": ".css",
            "savePath": "css"
        }
    ]

(!!! Додав комбінацію клавіш "Alt+Win+Z" для для відкриття "settings.json" файлу)

Налаштування середовища для препроцессора Sass:
(поточний стан, вже з готовими налаштуваннями)
- створюємо папку проекту 
- відкриваємо у редакторі 
- створюємо папку "css"
- створюємо папку "scss" та файл "style.scss" у ній
- натискаємо кнопку знизу в редакторі "watch sass"
- автоматично генерується файл "style.css" в папці "css"
- створюємо стилі в "style.scss", після чого вони автоматично переносяться в файл "style.css"

Встановлено наступні плагіни для препроцессора:
### Live Sass Compiler
~~~
Живий компілятор Sass
Розширення VSCode, яке допоможе вам компілювати/транспілювати файли SASS/SCSS у CSS у режимі реального часу.
~~~

### SCSS Formatter
~~~
SCSS Formatter — це розширення коду Visual Studio для форматування SCSS.
SCSS Formatter використовує Prettier під капотом для форматування файлів. Хоча Prettier підтримує форматування файлів різних типів. Це розширення зосереджено лише на SCSS. Крім того, він підтримує CSS.
~~~

### SCSS IntelliSense
~~~
SCSS IntelliSense (змінні, мікси та функції) для всіх файлів у робочій області.
~~~

Вкладеності:
HTML:
<body>
    <div class="block">
        <p>Hello</p>
        <div class="item">
            <p class="p__2">Hello World</p>
            <a  class="link" href="">First</a>
        </div>
    </div>
    <div class="block-2">
        <a class="link" href="">Google</a>
    </div>
</body>

SCSS:
1.
body {  /* це вкладеність */
    font-size: 16px;
    div {
        font-size: 32px;
        p {
            font-size: large;
            span {
                font-size: larger;
            }
        }
    }
}

2. 
.block { /* потрібно дуже уважно ставитись до побудови ієрархічності елементів в препроцесорі */
    font-family: fantasy;
    p {
        font-style: italic;
    }
    .item {
        font-size: larger;
        p {
            font-weight: 900;
            color: red;
        }
    }
}

3.
.block-2 { /* ховер прописується в одному кусочку */
    font-size: smaller;
    a {
    font-size: xx-large;
    color: blue;
    text-decoration: underline;
    }
    a:hover {
        color: green;
    }
}

4.
.block-2 { /* ховер прописується в одному кусочку  - & цей знак вставляється замість назви класу 
батьківського блоку - .block-2 */
    font-size: smaller;
    & .link {
    font-size: xx-large;
    color: blue;
    text-decoration: underline;
    }
    & .link:hover {
        color: green;
    }
}

5.
.link { /* в даному випадку ми в класі для лінків стилізуємо лінку яка знаходиться в конкретному 
блоці (зі своїм класом) */
    .item & {
        font-style: italic;
        font-size: medium;
        color: purple;
    }
    .item &:hover {
        color: green;
    }
}

Змінні:
HTML:
<div class="variables">
        <p class="first">Lorem ipsum dolor sit amet consectetur adipisicing elit.</p>
        <p class="second">Lorem ipsum dolor sit amet consectetur adipisicing elit. Hic repudiandae 
          cumque laboriosam eligendi inventore!</p>
    </div>

SCSS:
/* тут ми створюємо значення змінних та їхні назви */
$fs: 20px;
$color_1:red;
$color_2:pink;

.variables {
    .first { /* тут ми застосовуємо значення змінних */
        font-size: $fs;
        color: $color_1;
    }
    .second {
        font-size: $fs;
        color: $color_2;
    }
}

Імпорт других файлів стилів:
Основним файлом scss є "style.scss" в папці "scss". Для того щоб не нагромаджувати дуже багато інформації
в ньому щодо стилів, до прикладу коли наш сайт складається з 20 сторінок, - можна створити 20 scss файлів
в папці "scss", до прикладу з такими назвами: "first.scss", "second.scss" і так далі ... Після чого в кожному із
цих файлів здійснити стилізацію тих чи інших сторінок. Для того щоб все це працювало, ці сторінки потрібно
імпортувати (підключити) до основного файлу "style.scss", наступним чином:
З самого верху "style.scss" вставляємо такі імпорти:
@import "first.scss";
@import "second.scss";
... і так далі ...

Шаблони
SCSS:
%border-b { /* тут ми задаємо назву шаблону через "%" */
    font-size: 30px; /* вказуємо властивості та їх значення */
    border-bottom: 2px dashed red;
}

.templates {
    a {
        @extend %border-b; /* через @extend та назву шаблону застосовуємо до елементу */
    }
}

Міксини
@mixin fontz($fs, $c, $bgc){ /* тут ми вписуємо назви змінних по порядковості */
    font-size: $fs; /* тут ми створюємо змінні */
    color: $c;
    background-color: $bgc;
}

.mixin {
    a { /* за допомогою @include fontz підключаємо міксини і в дужках вказуємо значення по порядковості */
        @include fontz(25px, red, green)
    } /* значення вказуються у строгій порядковості, яку порушувати не можна ні в якому разі */
}


Точні математичні розрахунки
HTML:
<div class="virtual">Content</div>

SCSS
.virtual {
    width: 500px / 1700px * 100%; /* до прикладу ширина нашого екрану 1700 пікселів, даний блок 
    ми хочемо задати в 500 пікселів, однак хочемо визначити його ширину саме у відсотках. ми ділимо 
    ширину блоку на повний розмір екрану та множимо на 100% і цей чудовий препроцесор автоматично 
    здійснює математичний розрахунок та передає вичислені дані в CSS */
    background-color: darkcyan;
}

Посилання на відео урок:
https://www.youtube.com/watch?v=Mrq2ora_p0o&list=PLM6XATa8CAG4F9nAIYNS5oAiPotxwLFIr&index=17

